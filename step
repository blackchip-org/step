#!/bin/bash

# Copyright (c) 2013 - 2014 blackchip.org
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

__RUN_PROG="$(basename "$0") (run)"

__run_error() {
    echo "$__RUN_PROG: $@" >&2
}

eval set -- "$__RUN_ARGS"
__RUN_SKIPS=""

while true; do 
    case "$1" in
	--after|-a)
	    __RUN_AFTER=$2
	    __RUN_DISABLED=1
	    __RUN_STEP_REQUESTED=$2
	    shift 2
	    ;;
	--before|-b)
	    __RUN_BEFORE=$2
	    __RUN_STEP_REQUESTED=$2
	    shift 2
	    ;;
	--debug|-d)
	    __RUN_DEBUG=1
	    shift
	    ;;
	--only|-o)
	    __RUN_ONLY=$2
	    __RUN_STEP_REQUESTED=$2
	    shift 2
	    ;;
	--from|-f)
	    __RUN_FROM=$2
	    __RUN_DISABLED=1
	    __RUN_STEP_REQUESTED=$2
	    shift 2
	    ;;
	--to|-t)
	    __RUN_TO=$2
	    __RUN_STEP_REQUESTED=$2
	    shift 2
	    ;;
	--list|-l)
	    __RUN_LIST=1
	    shift
	    ;;
	--skip|-s)
	    __RUN_SKIPS="$__RUN_SKIPS __RUN_SKIP_$2&"
	    shift 2
	    ;;
	--debug|-d)
	    __RUN_DEBUG=1
	    shift
	    ;;
	--verbose|-v)
	    __RUN_BANNER=1
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    break
	    ;;
    esac
done

# Banner to be shown before each step is executed when using the --banner
# option. Override by assigning another banner command to the
# RUN_PRINT_BANNER variable
__run_banner() {
    local prog=$1
    local step=$2

    echo -e "\n===== $prog: $step"
}
RUN_BANNER=__run_banner

if [ "$__RUN_SET_X" ] ; then
    set -x
fi

__STEP_SHORT_OPTS="fs:e"
__STEP_LONG_OPTS="function,section:,end-section"

__step_usage() {
    cat <<EOF
Usage: step [options] <name> command...

Options:
    -e, --end-section   Ends the current section
    -f, --function      The name of the step is also the name of the function
                        to be executed. 
    -s, --section NAME  Start a section with the given NAME
EOF
}

step() {
    local step=""
    local args=$(POSIXLY_CORRECT=1 getopt -o "$__STEP_SHORT_OPTS" -l "$__STEP_LONG_OPTS" -n "$__RUN_PROG" -- "$@" )
    if [ $? -ne 0 ] ; then
	__step_usage
	exit 1
    fi

    eval set -- "$args"
    while true; do
	case "$1" in
	    -f|--function)
                # If this option is given, the name of the step is also the 
		# name of the function to be executed
		local is_function=true
		shift
		;;
	    -s|--section)
		local is_section=true
		step="$2"
		__RUN_SECTION=$2
		shift 2
		;;
	    -e|--end-section)
		unset __RUN_SECTION
		return 0
		;;
	    --)
                shift
		break
		;;
	    *)
		break
		;;
	esac
    done

    [ "$step" ] || step="$1"
    shift
    if [ ! "$step" ] ; then
	__run_error "No step specified"
	__step_usage
	exit 1
    fi

    if [ ! "$is_function" ] && [ ! "$is_section" ] && [ "$#" -eq 0 ] ; then
	__run_error "No command specified in step"
	__step_usage
	exit 1
    fi

    # Skip if only a specific step is to be run and this is not the step
    if [ "$__RUN_ONLY" ] ; then
	local is_only=""
	if [ "$__RUN_SECTION" = "$__RUN_ONLY" ] ; then
	    is_only=1
	elif [ "$step" = "$__RUN_ONLY" ] ; then
	    is_only=1
	fi
	if [ ! "$is_only" ] ; then
	    return 0
	fi
    fi

    # Start executing steps if this is the step listed in --from
    if [ "$step" == "$__RUN_FROM" ] ; then
        unset __RUN_DISABLED
    fi

    # Stop executing steps if this is the step listed in --before
    if [ "$step" == "$__RUN_BEFORE" ] ; then
	__RUN_DISABLED=true
    fi

    # Is this a step to be skipped?
    case "$__RUN_SKIPS" in
	*__RUN_SKIP_${step}*)
            if [ "$step" = "$__RUN_SECTION" ] ; then
		__RUN_AFTER_SECTION=$__RUN_SECTION
	    fi
            __RUN_SKIPPED=1
	    __RUN_PREVIOUS_DISABLED=$__RUN_DISABLED
	    __RUN_DISABLED=1
	    ;;
    esac

    #echo "#1 disabled: $__RUN_DISABLED after: $__RUN_AFTER_SECTION"
    if [ "$__RUN_DISABLED" ] ; then
	if [ "$__RUN_AFTER_SECTION" ] ; then
	    if [ "$__RUN_SECTION" != "$__RUN_AFTER_SECTION" ]; then 
		unset __RUN_DISABLED
		unset __RUN_AFTER_SECTION
	    else
		return 0
	    fi
	elif [ "$__RUN_SECTION" ] && \
	        [ "$__RUN_SECTION" == "$__RUN_AFTER" ] ; then
	    __RUN_AFTER_SECTION=$__RUN_SECTION
	    return 0
	fi
    fi

    #echo "#2 checking $step $__RUN_SECTION $__RUN_AFTER_SECTION"
    # Exit now if this step should not be run
    if [ "$__RUN_DISABLED" ] ; then
	if [ "$__RUN_SKIPPED" ] ; then
	    __RUN_DISABLED=$__RUN_PREVIOUS_DISABLED
	fi
        # Enable execution if this is the step specified in --after
	if [ "$step" == "$__RUN_AFTER" ] ; then
	    unset __RUN_DISABLED
	fi
        return 0
    fi

    __RUN_STEP_EXECUTED=1

    # Print banner if requested
    if [ "$__RUN_BANNER" ] ; then
	$RUN_BANNER $(basename "$0") $step
    fi

    # If just listing steps, show it now
    if [ "$__RUN_LIST" ] ; then
	if [ "$is_section" ] ; then
	    echo "==== $step"
	else
	    echo "$step"
	fi
    else
	# If the --function option was used, the step name is also the
	# function to be executed
	local function=""
	if [ "$is_function" ] ; then
	    function="$step"
	fi

	# If printing commands...
	if [ "$__RUN_DEBUG" ] ; then
	    # If it is a function, let bash do the work
	    if [ "$is_function" ] ; then
		set -x
	    # If inline, print it out
	    else
		echo "+ $@"
	    fi
	fi

	# Execute
	$function "$@" 
	local return_code=$?
	# If --command was set, stop printing commands at this point
	set +x

	# Exit now if the step failed
	if [ $return_code -ne 0 ] ; then
	    exit $return_code
	fi
	if [ "$__RUN_SET_X" ] ; then
	    # But turn command printing back on if debugging this script
	    set -x
	fi
    fi

    # If this is the final step specified by --to, don't execute any more
    # steps
    if [ "$step" == "$__RUN_TO" ] ; then
        __RUN_DISABLED=1
    fi

    return $return_code
}

# At the end, print out an error message if a step on the command line
# was not found.
__run_check_exit() {
    if [ "$__RUN_STEP_REQUESTED" ] && [ ! "$__RUN_STEP_EXECUTED" ] ; then
        __run_error "No such step: $__RUN_STEP_REQUESTED"
	exit 1
    fi
}

trap __run_check_exit EXIT
